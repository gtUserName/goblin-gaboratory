{"version":3,"sources":["routes/Client/Shows/Records.js","../node_modules/numeral/numeral.js","services/show.js"],"names":["columns","title","dataIndex","key","render","event","desc","state","__WEBPACK_IMPORTED_MODULE_4_moment___default","start","format","__WEBPACK_IMPORTED_MODULE_5_numeral___default","duration","size","Records","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","list","loading","__WEBPACK_IMPORTED_MODULE_1_react___default","a","PureComponent","load","setState","__WEBPACK_IMPORTED_MODULE_6__services_show__","getShowRecords","projectName","match","params","name","showId","data","createElement","__WEBPACK_IMPORTED_MODULE_3_antd__","bordered","dataSource","pagination","rowKey","record","event_id","propTypes","__WEBPACK_IMPORTED_MODULE_2_prop_types___default","object","__webpack_exports__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","numeral","_","decimal","binary","unformatRegex","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","stringToNumber","Number","version","obj","numberToFormat","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","reduce","array","callback","TypeError","t","len","k","arguments","multiplier","x","parts","correctionFactor","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","exports","__webpack_require__","module","shows","__WEBPACK_IMPORTED_MODULE_1__utils_resource__","liveShowResource","getShows","_ref","_asyncToGenerator","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","mark","_callee","wrap","_context","prev","limit","keyword","abrupt","get","stop","_x","apply","getShow","_ref3","_callee2","_ref2","_context2","_x2","getShowTags","_ref5","_callee3","_ref4","_context3","_x3","getShowStatistic","_ref7","_callee4","_ref6","_context4","_x4","getLiveStatistics","_ref9","_callee5","_ref8","_context5","_x5","_ref11","_callee6","_ref10","_context6","_x6","removeShowRecord","_ref13","_callee7","_ref12","eventId","_context7","remove","subId","_x7","addShowRecords","_ref15","_callee8","_ref14","events","_context8","post","_x8","getShowSchedules","_ref17","_callee9","_ref16","_context9","resourceType","_x9","getShowsByEvent","_ref19","_callee10","_ref18","_context10","resourceId","_x10","changeShowState","_ref21","_callee11","_ref20","op","_context11","_x11","updateShowInfo","_ref23","_callee12","_ref22","_objectWithoutProperties","_context12","put","_x12"],"mappings":"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","file":"static/js/38.d793f282.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { connect } from 'dva';\r\nimport { Card, Table } from 'antd';\r\nimport moment from 'moment';\r\nimport numeral from 'numeral';\r\n// import DescriptionList from 'ant-design-pro/lib/DescriptionList';\r\n// import { showState } from '../../../utils/filter';\r\nimport showServer from '../../../services/show';\r\n// import styles from './Records.less';\r\n\r\n\r\nconst columns = [{\r\n  title: '名称',\r\n  dataIndex: 'event',\r\n  key: 'desc',\r\n  render: event => event.desc,\r\n}, {\r\n  title: '状态',\r\n  dataIndex: 'event',\r\n  key: 'state',\r\n  render: event => event.state,\r\n}, {\r\n  title: '开始时间',\r\n  dataIndex: 'event',\r\n  key: 'start',\r\n  render: event => moment(event.start).format('YYYY-MM-DD HH:mm:ss'),\r\n}, {\r\n  title: '时长',\r\n  dataIndex: 'event',\r\n  key: 'duration',\r\n  render: event => numeral(event.duration / 1000).format('00:00:00'),\r\n}, {\r\n  title: '大小',\r\n  dataIndex: 'event',\r\n  key: 'size',\r\n  render: event => numeral(event.size).format('0.0 b'),\r\n}, {\r\n  title: '操作',\r\n  dataIndex: 'event',\r\n  key: 'action',\r\n  render: event => event.size,\r\n}];\r\n\r\n\r\nclass Records extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      list: [],\r\n      loading: false,\r\n    };\r\n\r\n    // this.onLoad = this.onLoad.bind(this);\r\n    // this.onRefresh = this.onRefresh.bind(this);\r\n    // this.onSearch = this.onSearch.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.load();\r\n  }\r\n  async load() {\r\n    this.setState({ loading: true });\r\n    const { data } = await showServer.getShowRecords({ projectName: this.props.match.params.name, showId: this.props.match.params.showId });\r\n    this.setState({ loading: false, list: data.list });\r\n  }\r\n  // onLoad() {\r\n  //   this.props.dispatch({ type: 'shows/load' });\r\n  // }\r\n  // onRefresh() {\r\n  //   this.props.dispatch({ type: 'shows/reload' });\r\n  // }\r\n  // onSearch(keyword) {\r\n  //   this.props.dispatch({ type: 'shows/search', payload: keyword });\r\n  // }\r\n  render() {\r\n    // const { info } = this.props;\r\n    // if (!info) {\r\n    //   return null;\r\n    // }\r\n\r\n    return (\r\n      <Card bordered={false}>\r\n        <Table\r\n          dataSource={this.state.list}\r\n          loading={this.state.loading}\r\n          columns={columns}\r\n          pagination={false}\r\n          rowKey={record => record.event_id}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nRecords.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\n\r\nexport default Records;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Client/Shows/Records.js","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/numeral/numeral.js\n// module id = 1418\n// module chunks = 4 5 7 19 20 25 35 38","\r\n// import { resource } from '../utils';\r\nimport resource from '../utils/resource';\r\n\r\n\r\nconst shows = () => {\r\n  return resource('/projects/:projectName/live_shows/:showId/:type/:subId');\r\n};\r\n\r\n// const showSchedules = () => {\r\n//   return resource('/projects/:projectName/live_show_schedules/:scheduleId');\r\n// };\r\n\r\n\r\nconst liveShowResource = () => {\r\n  return resource('/projects/:projectName/live_show/:resourceType/:resourceId/live_shows');\r\n};\r\n\r\nexport default {\r\n  async getShows(params) {\r\n    const data = {\r\n      projectName: params.projectName,\r\n      start: params.start,\r\n      limit: params.limit,\r\n    };\r\n    if (('string' === typeof params.keyword) && '' !== params.keyword) {\r\n      data.keyword = params.keyword;\r\n    }\r\n    return shows().get(data);\r\n  },\r\n  async getShow({ projectName, showId }) {\r\n    return shows().get({ projectName, showId });\r\n  },\r\n  async getShowTags({ projectName, showId }) {\r\n    return shows().get({ projectName, showId, type: 'tags' });\r\n  },\r\n  async getShowStatistic({ projectName, showId }) {\r\n    return shows().get({ projectName, showId, type: 'statistic' });\r\n  },\r\n  async getLiveStatistics({ projectName, showId }) {\r\n    return shows().get({ projectName, showId, type: 'lives' });\r\n  },\r\n  async getShowRecords({ projectName, showId }) {\r\n    return shows().get({ projectName, showId, type: 'records' });\r\n  },\r\n  async removeShowRecord({ projectName, showId, eventId }) {\r\n    return shows().remove({ projectName, showId, type: 'records', subId: eventId });\r\n  },\r\n  async addShowRecords({ projectName, showId, events }) {\r\n    return shows().post({ projectName, showId, type: 'records' }, events);\r\n  },\r\n  async getShowSchedules({ projectName, start, limit }) {\r\n    return liveShowResource().get({ projectName, resourceType: 'live_show_schedules', start, limit });\r\n  },\r\n  async getShowsByEvent({ projectName, eventId }) {\r\n    return liveShowResource().get({ projectName, resourceType: 'events', resourceId: eventId });\r\n  },\r\n  async changeShowState({ projectName, showId, op }) {\r\n    return shows().post({ projectName, showId }, { op });\r\n  },\r\n  async updateShowInfo({ projectName, showId, ...data }) {\r\n    return shows().put({ projectName, showId }, data);\r\n  },\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/show.js"],"sourceRoot":""}